// Generated by gencpp from file test_run1/Object.msg
// DO NOT EDIT!


#ifndef TEST_RUN1_MESSAGE_OBJECT_H
#define TEST_RUN1_MESSAGE_OBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace test_run1
{
template <class ContainerAllocator>
struct Object_
{
  typedef Object_<ContainerAllocator> Type;

  Object_()
    : header()
    , azimuth(0.0)
    , distance(0.0)
    , x(0.0)
    , y(0.0)
    , speed(0.0)
    , status(0)
    , id(0)  {
    }
  Object_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , azimuth(0.0)
    , distance(0.0)
    , x(0.0)
    , y(0.0)
    , speed(0.0)
    , status(0)
    , id(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _azimuth_type;
  _azimuth_type azimuth;

   typedef float _distance_type;
  _distance_type distance;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _speed_type;
  _speed_type speed;

   typedef uint8_t _status_type;
  _status_type status;

   typedef uint8_t _id_type;
  _id_type id;



  enum {
    NEW_TARGET = 1u,
    UPDATE_TARGET = 3u,
    COASTED_TARGET = 4u,
  };


  typedef boost::shared_ptr< ::test_run1::Object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::test_run1::Object_<ContainerAllocator> const> ConstPtr;

}; // struct Object_

typedef ::test_run1::Object_<std::allocator<void> > Object;

typedef boost::shared_ptr< ::test_run1::Object > ObjectPtr;
typedef boost::shared_ptr< ::test_run1::Object const> ObjectConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::test_run1::Object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::test_run1::Object_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace test_run1

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'HasHeader': True, 'IsMessage': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'test_run1': ['/home/lz/test_demo/src/test_run1/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::test_run1::Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::test_run1::Object_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test_run1::Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test_run1::Object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test_run1::Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test_run1::Object_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::test_run1::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "30bde2c6a90c7a762f2a0599de6a2fa7";
  }

  static const char* value(const ::test_run1::Object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x30bde2c6a90c7a76ULL;
  static const uint64_t static_value2 = 0x2f2a0599de6a2fa7ULL;
};

template<class ContainerAllocator>
struct DataType< ::test_run1::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "test_run1/Object";
  }

  static const char* value(const ::test_run1::Object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::test_run1::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 NEW_TARGET = 1\n\
uint8 UPDATE_TARGET = 3\n\
uint8 COASTED_TARGET = 4\n\
\n\
Header header\n\
\n\
float32 azimuth\n\
float32 distance\n\
\n\
float32 x\n\
float32 y\n\
\n\
float32 speed\n\
uint8 status\n\
uint8 id\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::test_run1::Object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::test_run1::Object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.azimuth);
      stream.next(m.distance);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.speed);
      stream.next(m.status);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::test_run1::Object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::test_run1::Object_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "azimuth: ";
    Printer<float>::stream(s, indent + "  ", v.azimuth);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEST_RUN1_MESSAGE_OBJECT_H
